apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mimir
  labels: {{include "labels" . | nindent 4}}
spec:
  selector:
    matchLabels: {{include "selectorLabels" . | nindent 6}}
  replicas: {{.Values.replicas}}
  podManagementPolicy: Parallel
  template:
    metadata:
      labels: {{include "labels" . | nindent 8}}
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      volumes:
        - name: config
          configMap:
            name: mimir
            items:
              - key: mimir.yaml
                path: mimir.yaml
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels: {{include "selectorLabels" . | nindent 18}}
              topologyKey: topology.kubernetes.io/zone
      containers:
        - name: mimir
          image: grafana/mimir:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/mimir/mimir.yaml
            - -target=all
            - -config.expand-env=true
          volumeMounts:
            - name: data
              mountPath: /mimir
            - name: config
              mountPath: /etc/mimir
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 3100
              name: http
              protocol: TCP
            - containerPort: 7946
              name: gossip
              protocol: TCP
          resources: {{toYaml .Values.resources | nindent 12}}
          startupProbe:
            httpGet:
              path: /ready
              port: http
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 1
            failureThreshold: 3
          env:
            - name: S3_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{.Values.secret}}
                  key: S3_ENDPOINT
            - name: S3_REGION
              valueFrom:
                secretKeyRef:
                  name: {{.Values.secret}}
                  key: S3_REGION
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{.Values.secret}}
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{.Values.secret}}
                  key: S3_SECRET_KEY
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{include "labels" . | nindent 10}}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{.Values.volume.storageClass}}
        resources:
          requests:
            storage: {{.Values.volume.size}}
